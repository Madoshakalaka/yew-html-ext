error: this opening tag has no corresponding closing tag
 --> tests/html_macro/element-fail.rs:7:13
  |
7 |     html! { <div> };
  |             ^^^^^

error: this opening tag has no corresponding closing tag
 --> tests/html_macro/element-fail.rs:8:18
  |
8 |     html! { <div><div> };
  |                  ^^^^^

error: this opening tag has no corresponding closing tag
 --> tests/html_macro/element-fail.rs:9:13
  |
9 |     html! { <div><div></div> };
  |             ^^^^^

error: this closing tag has no corresponding opening tag
  --> tests/html_macro/element-fail.rs:12:13
   |
12 |     html! { </div> };
   |             ^^^^^^

error: this closing tag has no corresponding opening tag
  --> tests/html_macro/element-fail.rs:13:18
   |
13 |     html! { <div></span></div> };
   |                  ^^^^^^^

error: this closing tag has no corresponding opening tag
  --> tests/html_macro/element-fail.rs:14:20
   |
14 |     html! { <img /></img> };
   |                    ^^^^^^

error: this closing tag has no corresponding opening tag
  --> tests/html_macro/element-fail.rs:17:18
   |
17 |     html! { <div></span> };
   |                  ^^^^^^^

error: this closing tag has no corresponding opening tag
  --> tests/html_macro/element-fail.rs:18:20
   |
18 |     html! { <tag-a></tag-b> };
   |                    ^^^^^^^^

error: expected a valid html element
  --> tests/html_macro/element-fail.rs:21:18
   |
21 |     html! { <div>Invalid</div> };
   |                  ^^^^^^^

error: `attr` can only be specified once but is given here again
  --> tests/html_macro/element-fail.rs:24:27
   |
24 |     html! { <input attr=1 attr=2 /> };
   |                           ^^^^

error: `value` can only be specified once but is given here again
  --> tests/html_macro/element-fail.rs:25:32
   |
25 |     html! { <input value="123" value="456" /> };
   |                                ^^^^^

error: `kind` can only be specified once but is given here again
  --> tests/html_macro/element-fail.rs:26:36
   |
26 |     html! { <input kind="checkbox" kind="submit" /> };
   |                                    ^^^^

error: `checked` can only be specified once but is given here again
  --> tests/html_macro/element-fail.rs:27:33
   |
27 |     html! { <input checked=true checked=false /> };
   |                                 ^^^^^^^

error: `disabled` can only be specified once but is given here again
  --> tests/html_macro/element-fail.rs:28:34
   |
28 |     html! { <input disabled=true disabled=false /> };
   |                                  ^^^^^^^^

error: `selected` can only be specified once but is given here again
  --> tests/html_macro/element-fail.rs:29:35
   |
29 |     html! { <option selected=true selected=false /> };
   |                                   ^^^^^^^^

error: `class` can only be specified once but is given here again
  --> tests/html_macro/element-fail.rs:30:32
   |
30 |     html! { <div class="first" class="second" /> };
   |                                ^^^^^

error: `ref` can only be specified once
  --> tests/html_macro/element-fail.rs:31:29
   |
31 |     html! { <input ref={()} ref={()} /> };
   |                             ^^^

error: `ref` can only be specified once
  --> tests/html_macro/element-fail.rs:61:29
   |
61 |     html! { <input ref={()} ref={()} /> };
   |                             ^^^

error: the tag `<input>` is a void element and cannot have children (hint: rewrite this as `<input />`)
  --> tests/html_macro/element-fail.rs:64:13
   |
64 |     html! { <input type="text"></input> };
   |             ^^^^^^^^^^^^^^^^^^^

error: the tag `<iNpUt>` is a void element and cannot have children (hint: rewrite this as `<iNpUt />`)
  --> tests/html_macro/element-fail.rs:66:13
   |
66 |     html! { <iNpUt type="text"></iNpUt> };
   |             ^^^^^^^^^^^^^^^^^^^

error: this dynamic tag is missing an expression block defining its value
  --> tests/html_macro/element-fail.rs:69:14
   |
69 |     html! { <@></@> };
   |              ^

error: this dynamic tag is missing an expression block defining its value
  --> tests/html_macro/element-fail.rs:70:14
   |
70 |     html! { <@/> };
   |              ^

error: dynamic closing tags must not have a body (hint: replace it with just `</@>`)
  --> tests/html_macro/element-fail.rs:73:27
   |
73 |     html! { <@{"test"}></@{"test"}> };
   |                           ^^^^^^^^

error: the property value must be either a literal or enclosed in braces. Consider adding braces around your expression.
  --> tests/html_macro/element-fail.rs:78:24
   |
78 |     html! { <input ref=() /> };
   |                        ^^

error: the property value must be either a literal or enclosed in braces. Consider adding braces around your expression.
  --> tests/html_macro/element-fail.rs:79:24
   |
79 |     html! { <input ref=() ref=() /> };
   |                        ^^

error: the property value must be either a literal or enclosed in braces. Consider adding braces around your expression.
  --> tests/html_macro/element-fail.rs:80:28
   |
80 |     html! { <input onfocus=Some(5) /> };
   |                            ^^^^^^^

error: the property value must be either a literal or enclosed in braces. Consider adding braces around your expression.
  --> tests/html_macro/element-fail.rs:81:27
   |
81 |     html! { <input string=NotToString /> };
   |                           ^^^^^^^^^^^

error: the property value must be either a literal or enclosed in braces. Consider adding braces around your expression.
  --> tests/html_macro/element-fail.rs:82:22
   |
82 |     html! { <a media=Some(NotToString) /> };
   |                      ^^^^^^^^^^^^^^^^^

error: the property value must be either a literal or enclosed in braces. Consider adding braces around your expression.
  --> tests/html_macro/element-fail.rs:83:21
   |
83 |     html! { <a href=Some(5) /> };
   |                     ^^^^^^^

error: the property value must be either a literal or enclosed in braces. Consider adding braces around your expression.
  --> tests/html_macro/element-fail.rs:84:25
   |
84 |     html! { <input type=() /> };
   |                         ^^

error: the property value must be either a literal or enclosed in braces. Consider adding braces around your expression.
  --> tests/html_macro/element-fail.rs:85:26
   |
85 |     html! { <input value=() /> };
   |                          ^^

error: the property value must be either a literal or enclosed in braces. Consider adding braces around your expression.
  --> tests/html_macro/element-fail.rs:86:27
   |
86 |     html! { <input string=NotToString /> };
   |                           ^^^^^^^^^^^

error[E0308]: mismatched types
  --> tests/html_macro/element-fail.rs:34:28
   |
34 |     html! { <input checked=1 /> };
   |                            ^ expected `Option<bool>`, found `Option<{integer}>`
   |
   = note: expected enum `Option<bool>`
              found enum `Option<{integer}>`
   = note: this error originates in the macro `html` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0308]: mismatched types
  --> tests/html_macro/element-fail.rs:35:29
   |
35 |     html! { <input checked={Some(false)} /> };
   |                             ^^^^^^^^^^^ expected `Option<bool>`, found `Option<Option<bool>>`
   |
   = note: expected enum `Option<bool>`
              found enum `Option<Option<bool>>`
   = note: this error originates in the macro `html` (in Nightly builds, run with -Z macro-backtrace for more info)
help: consider using `Option::expect` to unwrap the `Option<Option<bool>>` value, panicking if the value is an `Option::None`
   |
35 |     html! { <input checked={Some(false)} /> }.expect("REASON");
   |                                              +++++++++++++++++

error[E0308]: mismatched types
  --> tests/html_macro/element-fail.rs:36:29
   |
36 |     html! { <input disabled=1 /> };
   |                             ^
   |                             |
   |                             expected `bool`, found integer
   |                             arguments to this function are incorrect
   |
note: function defined here
  --> /home/maa/.cargo/git/checkouts/yew-07f42ef43f99cbca/4d08a03/packages/yew/src/utils/mod.rs:56:8
   |
56 | pub fn __ensure_type<T>(_: T) {}
   |        ^^^^^^^^^^^^^

error[E0308]: mismatched types
  --> tests/html_macro/element-fail.rs:37:30
   |
37 |     html! { <input disabled={Some(true)} /> };
   |                              ^^^^^^^^^^ expected `bool`, found `Option<bool>`
   |
   = note: expected type `bool`
              found enum `Option<bool>`
help: use `Option::is_some` to test if the `Option` has a value
   |
37 |     html! { <input disabled={Some(true).is_some()} /> };
   |                                        ++++++++++

error[E0308]: mismatched types
  --> tests/html_macro/element-fail.rs:38:30
   |
38 |     html! { <option selected=1 /> };
   |                              ^
   |                              |
   |                              expected `bool`, found integer
   |                              arguments to this function are incorrect
   |
note: function defined here
  --> /home/maa/.cargo/git/checkouts/yew-07f42ef43f99cbca/4d08a03/packages/yew/src/utils/mod.rs:56:8
   |
56 | pub fn __ensure_type<T>(_: T) {}
   |        ^^^^^^^^^^^^^

error[E0277]: the trait bound `(): IntoPropValue<Option<implicit_clone::unsync::string::IString>>` is not satisfied
  --> tests/html_macro/element-fail.rs:41:26
   |
41 |     html! { <input type={()} /> };
   |                          ^^ the trait `IntoPropValue<Option<implicit_clone::unsync::string::IString>>` is not implemented for `()`
   |
   = help: the trait `IntoPropValue<Option<implicit_clone::unsync::string::IString>>` is not implemented for `()`
           but trait `IntoPropValue<VNode>` is implemented for it
   = help: for that trait implementation, expected `VNode`, found `Option<implicit_clone::unsync::string::IString>`

error[E0277]: the trait bound `(): IntoPropValue<Option<implicit_clone::unsync::string::IString>>` is not satisfied
  --> tests/html_macro/element-fail.rs:42:27
   |
42 |     html! { <input value={()} /> };
   |                           ^^ the trait `IntoPropValue<Option<implicit_clone::unsync::string::IString>>` is not implemented for `()`
   |
   = help: the trait `IntoPropValue<Option<implicit_clone::unsync::string::IString>>` is not implemented for `()`
           but trait `IntoPropValue<VNode>` is implemented for it
   = help: for that trait implementation, expected `VNode`, found `Option<implicit_clone::unsync::string::IString>`

error[E0277]: the trait bound `(): IntoPropValue<Option<implicit_clone::unsync::string::IString>>` is not satisfied
  --> tests/html_macro/element-fail.rs:43:22
   |
43 |     html! { <a href={()} /> };
   |                      ^^ the trait `IntoPropValue<Option<implicit_clone::unsync::string::IString>>` is not implemented for `()`
   |
   = help: the trait `IntoPropValue<Option<implicit_clone::unsync::string::IString>>` is not implemented for `()`
           but trait `IntoPropValue<VNode>` is implemented for it
   = help: for that trait implementation, expected `VNode`, found `Option<implicit_clone::unsync::string::IString>`

error[E0277]: the trait bound `NotToString: IntoPropValue<Option<implicit_clone::unsync::string::IString>>` is not satisfied
  --> tests/html_macro/element-fail.rs:44:28
   |
44 |     html! { <input string={NotToString} /> };
   |                            ^^^^^^^^^^^ the trait `IntoPropValue<Option<implicit_clone::unsync::string::IString>>` is not implemented for `NotToString`
   |
   = help: the following other types implement trait `IntoPropValue<T>`:
             `&'static [(K, V)]` implements `IntoPropValue<implicit_clone::unsync::map::IMap<K, V>>`
             `&'static [T]` implements `IntoPropValue<implicit_clone::unsync::array::IArray<T>>`
             `&'static str` implements `IntoPropValue<Classes>`
             `&'static str` implements `IntoPropValue<Option<String>>`
             `&'static str` implements `IntoPropValue<Option<implicit_clone::unsync::string::IString>>`
             `&'static str` implements `IntoPropValue<String>`
             `&'static str` implements `IntoPropValue<implicit_clone::unsync::string::IString>`
             `&String` implements `IntoPropValue<VNode>`
           and $N others

error[E0277]: the trait bound `Option<NotToString>: IntoPropValue<Option<implicit_clone::unsync::string::IString>>` is not satisfied
  --> tests/html_macro/element-fail.rs:45:23
   |
45 |     html! { <a media={Some(NotToString)} /> };
   |                       ^^^^^^^^^^^^^^^^^ the trait `IntoPropValue<Option<implicit_clone::unsync::string::IString>>` is not implemented for `Option<NotToString>`
   |
   = help: the following other types implement trait `IntoPropValue<T>`:
             `Option<&str>` implements `IntoPropValue<Option<String>>`
             `Option<&str>` implements `IntoPropValue<Option<implicit_clone::unsync::string::IString>>`
             `Option<Cow<'_, str>>` implements `IntoPropValue<Option<implicit_clone::unsync::string::IString>>`
             `Option<F>` implements `IntoPropValue<Option<Callback<I, O>>>`
             `Option<Rc<str>>` implements `IntoPropValue<Option<implicit_clone::unsync::string::IString>>`
             `Option<String>` implements `IntoPropValue<Option<implicit_clone::unsync::string::IString>>`
             `Option<VChild<T>>` implements `IntoPropValue<Option<ChildrenRenderer<C>>>`
             `Option<VNode>` implements `IntoPropValue<VNode>`

error[E0277]: the trait bound `Option<{integer}>: IntoPropValue<Option<implicit_clone::unsync::string::IString>>` is not satisfied
  --> tests/html_macro/element-fail.rs:46:22
   |
46 |     html! { <a href={Some(5)} /> };
   |                      ^^^^^^^ the trait `IntoPropValue<Option<implicit_clone::unsync::string::IString>>` is not implemented for `Option<{integer}>`
   |
   = help: the following other types implement trait `IntoPropValue<T>`:
             `Option<&str>` implements `IntoPropValue<Option<String>>`
             `Option<&str>` implements `IntoPropValue<Option<implicit_clone::unsync::string::IString>>`
             `Option<Cow<'_, str>>` implements `IntoPropValue<Option<implicit_clone::unsync::string::IString>>`
             `Option<F>` implements `IntoPropValue<Option<Callback<I, O>>>`
             `Option<Rc<str>>` implements `IntoPropValue<Option<implicit_clone::unsync::string::IString>>`
             `Option<String>` implements `IntoPropValue<Option<implicit_clone::unsync::string::IString>>`
             `Option<VChild<T>>` implements `IntoPropValue<Option<ChildrenRenderer<C>>>`
             `Option<VNode>` implements `IntoPropValue<VNode>`

error[E0277]: the trait bound `{integer}: IntoEventCallback<MouseEvent>` is not satisfied
   --> tests/html_macro/element-fail.rs:49:28
    |
49  |     html! { <input onclick=1 /> };
    |     -----------------------^-----
    |     |                      |
    |     |                      the trait `Fn(MouseEvent)` is not implemented for `{integer}`
    |     required by a bound introduced by this call
    |
    = help: the following other types implement trait `IntoEventCallback<EVENT>`:
              &Callback<EVENT>
              Callback<EVENT>
              Option<Callback<EVENT>>
              Option<T>
    = note: required for `{integer}` to implement `IntoEventCallback<MouseEvent>`
note: required by a bound in `yew::html::onclick::Wrapper::__macro_new`
   --> /home/maa/.cargo/git/checkouts/yew-07f42ef43f99cbca/4d08a03/packages/yew/src/html/listener/events.rs:129:1
    |
129 | / impl_short! {
130 | |     onauxclick(MouseEvent)
131 | |     onclick(MouseEvent)
...   |
193 | |     ontransitionstart(TransitionEvent)
194 | | }
    | | ^
    | | |
    | |_required by a bound in this associated function
    |   required by this bound in `Wrapper::__macro_new`
    = note: this error originates in the macro `impl_action` which comes from the expansion of the macro `impl_short` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: the trait bound `Callback<String>: IntoEventCallback<MouseEvent>` is not satisfied
   --> tests/html_macro/element-fail.rs:50:29
    |
50  |     html! { <input onclick={::yew::callback::Callback::from(|a: String| ())} /> };
    |     ------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^------
    |     |                       |
    |     |                       the trait `Fn(MouseEvent)` is not implemented for `Callback<String>`
    |     required by a bound introduced by this call
    |
    = help: the following other types implement trait `IntoEventCallback<EVENT>`:
              &Callback<EVENT>
              Callback<EVENT>
    = note: required for `Callback<String>` to implement `IntoEventCallback<MouseEvent>`
note: required by a bound in `yew::html::onclick::Wrapper::__macro_new`
   --> /home/maa/.cargo/git/checkouts/yew-07f42ef43f99cbca/4d08a03/packages/yew/src/html/listener/events.rs:129:1
    |
129 | / impl_short! {
130 | |     onauxclick(MouseEvent)
131 | |     onclick(MouseEvent)
...   |
193 | |     ontransitionstart(TransitionEvent)
194 | | }
    | | ^
    | | |
    | |_required by a bound in this associated function
    |   required by this bound in `Wrapper::__macro_new`
    = note: this error originates in the macro `impl_action` which comes from the expansion of the macro `impl_short` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: the trait bound `Option<{integer}>: IntoEventCallback<FocusEvent>` is not satisfied
   --> tests/html_macro/element-fail.rs:51:29
    |
51  |     html! { <input onfocus={Some(5)} /> };
    |     ------------------------^^^^^^^------
    |     |                       |
    |     |                       the trait `IntoEventCallback<FocusEvent>` is not implemented for `Option<{integer}>`
    |     required by a bound introduced by this call
    |
    = help: the following other types implement trait `IntoEventCallback<EVENT>`:
              Option<Callback<EVENT>>
              Option<T>
note: required by a bound in `yew::html::onfocus::Wrapper::__macro_new`
   --> /home/maa/.cargo/git/checkouts/yew-07f42ef43f99cbca/4d08a03/packages/yew/src/html/listener/events.rs:129:1
    |
129 | / impl_short! {
130 | |     onauxclick(MouseEvent)
131 | |     onclick(MouseEvent)
...   |
193 | |     ontransitionstart(TransitionEvent)
194 | | }
    | | ^
    | | |
    | |_required by a bound in this associated function
    |   required by this bound in `Wrapper::__macro_new`
    = note: this error originates in the macro `impl_action` which comes from the expansion of the macro `impl_short` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: the trait bound `(): IntoPropValue<NodeRef>` is not satisfied
  --> tests/html_macro/element-fail.rs:54:25
   |
54 |     html! { <input ref={()} /> };
   |                         ^^
   |                         |
   |                         the trait `IntoPropValue<NodeRef>` is not implemented for `()`
   |                         required by a bound introduced by this call
   |
   = help: the trait `IntoPropValue<NodeRef>` is not implemented for `()`
           but trait `IntoPropValue<VNode>` is implemented for it
   = help: for that trait implementation, expected `VNode`, found `NodeRef`

error[E0277]: the trait bound `Option<NodeRef>: IntoPropValue<NodeRef>` is not satisfied
  --> tests/html_macro/element-fail.rs:55:25
   |
55 |     html! { <input ref={Some(::yew::html::NodeRef::default())} /> };
   |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |                         |
   |                         the trait `IntoPropValue<NodeRef>` is not implemented for `Option<NodeRef>`
   |                         required by a bound introduced by this call
   |
   = help: the following other types implement trait `IntoPropValue<T>`:
             `Option<&str>` implements `IntoPropValue<Option<String>>`
             `Option<&str>` implements `IntoPropValue<Option<implicit_clone::unsync::string::IString>>`
             `Option<Cow<'_, str>>` implements `IntoPropValue<Option<implicit_clone::unsync::string::IString>>`
             `Option<F>` implements `IntoPropValue<Option<Callback<I, O>>>`
             `Option<Rc<str>>` implements `IntoPropValue<Option<implicit_clone::unsync::string::IString>>`
             `Option<String>` implements `IntoPropValue<Option<implicit_clone::unsync::string::IString>>`
             `Option<VChild<T>>` implements `IntoPropValue<Option<ChildrenRenderer<C>>>`
             `Option<VNode>` implements `IntoPropValue<VNode>`

error[E0277]: the trait bound `Callback<String>: IntoEventCallback<MouseEvent>` is not satisfied
   --> tests/html_macro/element-fail.rs:56:29
    |
56  |     html! { <input onclick={::yew::callback::Callback::from(|a: String| ())} /> };
    |     ------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^------
    |     |                       |
    |     |                       the trait `Fn(MouseEvent)` is not implemented for `Callback<String>`
    |     required by a bound introduced by this call
    |
    = help: the following other types implement trait `IntoEventCallback<EVENT>`:
              &Callback<EVENT>
              Callback<EVENT>
    = note: required for `Callback<String>` to implement `IntoEventCallback<MouseEvent>`
note: required by a bound in `yew::html::onclick::Wrapper::__macro_new`
   --> /home/maa/.cargo/git/checkouts/yew-07f42ef43f99cbca/4d08a03/packages/yew/src/html/listener/events.rs:129:1
    |
129 | / impl_short! {
130 | |     onauxclick(MouseEvent)
131 | |     onclick(MouseEvent)
...   |
193 | |     ontransitionstart(TransitionEvent)
194 | | }
    | | ^
    | | |
    | |_required by a bound in this associated function
    |   required by this bound in `Wrapper::__macro_new`
    = note: this error originates in the macro `impl_action` which comes from the expansion of the macro `impl_short` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: the trait bound `NotToString: IntoPropValue<Option<implicit_clone::unsync::string::IString>>` is not satisfied
  --> tests/html_macro/element-fail.rs:58:28
   |
58 |     html! { <input string={NotToString} /> };
   |                            ^^^^^^^^^^^ the trait `IntoPropValue<Option<implicit_clone::unsync::string::IString>>` is not implemented for `NotToString`
   |
   = help: the following other types implement trait `IntoPropValue<T>`:
             `&'static [(K, V)]` implements `IntoPropValue<implicit_clone::unsync::map::IMap<K, V>>`
             `&'static [T]` implements `IntoPropValue<implicit_clone::unsync::array::IArray<T>>`
             `&'static str` implements `IntoPropValue<Classes>`
             `&'static str` implements `IntoPropValue<Option<String>>`
             `&'static str` implements `IntoPropValue<Option<implicit_clone::unsync::string::IString>>`
             `&'static str` implements `IntoPropValue<String>`
             `&'static str` implements `IntoPropValue<implicit_clone::unsync::string::IString>`
             `&String` implements `IntoPropValue<VNode>`
           and $N others

error[E0277]: the trait bound `(): IntoPropValue<NodeRef>` is not satisfied
  --> tests/html_macro/element-fail.rs:60:25
   |
60 |     html! { <input ref={()} /> };
   |                         ^^
   |                         |
   |                         the trait `IntoPropValue<NodeRef>` is not implemented for `()`
   |                         required by a bound introduced by this call
   |
   = help: the trait `IntoPropValue<NodeRef>` is not implemented for `()`
           but trait `IntoPropValue<VNode>` is implemented for it
   = help: for that trait implementation, expected `VNode`, found `NodeRef`

error[E0277]: the trait bound `implicit_clone::unsync::string::IString: From<{integer}>` is not satisfied
  --> tests/html_macro/element-fail.rs:75:16
   |
75 |     html! { <@{55}></@> };
   |                ^^ the trait `From<{integer}>` is not implemented for `implicit_clone::unsync::string::IString`
   |
   = help: the following other types implement trait `From<T>`:
             `implicit_clone::unsync::string::IString` implements `From<&implicit_clone::unsync::string::IString>`
             `implicit_clone::unsync::string::IString` implements `From<&str>`
             `implicit_clone::unsync::string::IString` implements `From<Arguments<'_>>`
             `implicit_clone::unsync::string::IString` implements `From<Cow<'_, str>>`
             `implicit_clone::unsync::string::IString` implements `From<Rc<str>>`
             `implicit_clone::unsync::string::IString` implements `From<String>`
   = note: required for `{integer}` to implement `Into<implicit_clone::unsync::string::IString>`
