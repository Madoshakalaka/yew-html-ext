error: this opening tag has no corresponding closing tag
  --> tests/html_macro/component-fail.rs:42:13
   |
42 |     html! { <Child> };
   |             ^^^^^^^

error: unexpected end of input, expected identifier
  --> tests/html_macro/component-fail.rs:43:13
   |
43 |     html! { <Child:: /> };
   |             ^^^^^^^^^^^

error: `with` doesn't have a value. (hint: set the value to `true` or `false` for boolean attributes)
  --> tests/html_macro/component-fail.rs:44:20
   |
44 |     html! { <Child with /> };
   |                    ^^^^

error: expected base props expression after `..`
  --> tests/html_macro/component-fail.rs:45:20
   |
45 |     html! { <Child .. /> };
   |                    ^^

error: unexpected end of input, expected an expression
  --> tests/html_macro/component-fail.rs:45:13
   |
45 |     html! { <Child .. /> };
   |             ^^^^^^^^^^^^

error: expected base props expression after `..`
  --> tests/html_macro/component-fail.rs:46:20
   |
46 |     html! { <Child ..{ 5 + } /> };
   |                    ^^

error: unexpected end of input, expected an expression
  --> tests/html_macro/component-fail.rs:46:28
   |
46 |     html! { <Child ..{ 5 + } /> };
   |                            ^

error: `props` doesn't have a value. (hint: set the value to `true` or `false` for boolean attributes)
  --> tests/html_macro/component-fail.rs:47:20
   |
47 |     html! { <Child props /> };
   |                    ^^^^^

error: `with` doesn't have a value. (hint: set the value to `true` or `false` for boolean attributes)
  --> tests/html_macro/component-fail.rs:48:20
   |
48 |     html! { <Child with props > };
   |                    ^^^^

error: this opening tag has no corresponding closing tag
  --> tests/html_macro/component-fail.rs:49:13
   |
49 |     html! { <Child ..props > };
   |             ^^^^^^^^^^^^^^^^

error: `with` doesn't have a value. (hint: set the value to `true` or `false` for boolean attributes)
  --> tests/html_macro/component-fail.rs:51:20
   |
51 |     html! { <Child with p1 with p2 /> };
   |                    ^^^^

error: `with` doesn't have a value. (hint: set the value to `true` or `false` for boolean attributes)
  --> tests/html_macro/component-fail.rs:53:20
   |
53 |     html! { <Child with props ref={()} ref={()} /> };
   |                    ^^^^

error: base props expression must appear last in list of props
  --> tests/html_macro/component-fail.rs:54:20
   |
54 |     html! { <Child ..props ref={()} ref={()} /> };
   |                    ^^^^^^^

error: `with` doesn't have a value. (hint: set the value to `true` or `false` for boolean attributes)
  --> tests/html_macro/component-fail.rs:55:20
   |
55 |     html! { <Child with props ref={()} ref={()} value=1 /> };
   |                    ^^^^

error: base props expression must appear last in list of props
  --> tests/html_macro/component-fail.rs:56:20
   |
56 |     html! { <Child ..props ref={()} ref={()} value=1 /> };
   |                    ^^^^^^^

error: `with` doesn't have a value. (hint: set the value to `true` or `false` for boolean attributes)
  --> tests/html_macro/component-fail.rs:57:20
   |
57 |     html! { <Child with props ref={()} value=1 ref={()} /> };
   |                    ^^^^

error: base props expression must appear last in list of props
  --> tests/html_macro/component-fail.rs:58:20
   |
58 |     html! { <Child ..props ref={()} value=1 ref={()} /> };
   |                    ^^^^^^^

error: `with` doesn't have a value. (hint: set the value to `true` or `false` for boolean attributes)
  --> tests/html_macro/component-fail.rs:59:20
   |
59 |     html! { <Child with props value=1 ref={()}  ref={()} /> };
   |                    ^^^^

error: base props expression must appear last in list of props
  --> tests/html_macro/component-fail.rs:60:20
   |
60 |     html! { <Child ..props value=1 ref={()}  ref={()} /> };
   |                    ^^^^^^^

error: `with` doesn't have a value. (hint: set the value to `true` or `false` for boolean attributes)
  --> tests/html_macro/component-fail.rs:61:28
   |
61 |     html! { <Child value=1 with props  ref={()}  ref={()} /> };
   |                            ^^^^

error: base props expression must appear last in list of props
  --> tests/html_macro/component-fail.rs:62:28
   |
62 |     html! { <Child value=1 ..props  ref={()}  ref={()} /> };
   |                            ^^^^^^^

error: `with` doesn't have a value. (hint: set the value to `true` or `false` for boolean attributes)
  --> tests/html_macro/component-fail.rs:63:37
   |
63 |     html! { <Child value=1 ref={()} with props ref={()} /> };
   |                                     ^^^^

error: base props expression must appear last in list of props
  --> tests/html_macro/component-fail.rs:64:37
   |
64 |     html! { <Child value=1 ref={()} ..props ref={()} /> };
   |                                     ^^^^^^^

error: `with` doesn't have a value. (hint: set the value to `true` or `false` for boolean attributes)
  --> tests/html_macro/component-fail.rs:65:47
   |
65 |     html! { <Child ref={()} ref={()} value=1  with props  /> };
   |                                               ^^^^

error: `ref` can only be specified once
  --> tests/html_macro/component-fail.rs:66:29
   |
66 |     html! { <Child ref={()} ref={()} value=1 ..props  /> };
   |                             ^^^

error: `with` doesn't have a value. (hint: set the value to `true` or `false` for boolean attributes)
  --> tests/html_macro/component-fail.rs:67:20
   |
67 |     html! { <Child with props r#ref={()} r#ref={()} /> };
   |                    ^^^^

error: base props expression must appear last in list of props
  --> tests/html_macro/component-fail.rs:68:20
   |
68 |     html! { <Child ..props r#ref={()} r#ref={()} /> };
   |                    ^^^^^^^

error: `with` doesn't have a value. (hint: set the value to `true` or `false` for boolean attributes)
  --> tests/html_macro/component-fail.rs:69:20
   |
69 |     html! { <Child with props r#ref={()} r#ref={()} value=1 /> };
   |                    ^^^^

error: base props expression must appear last in list of props
  --> tests/html_macro/component-fail.rs:70:20
   |
70 |     html! { <Child ..props r#ref={()} r#ref={()} value=1 /> };
   |                    ^^^^^^^

error: `with` doesn't have a value. (hint: set the value to `true` or `false` for boolean attributes)
  --> tests/html_macro/component-fail.rs:71:20
   |
71 |     html! { <Child with props r#ref={()} value=1 r#ref={()} /> };
   |                    ^^^^

error: base props expression must appear last in list of props
  --> tests/html_macro/component-fail.rs:72:20
   |
72 |     html! { <Child ..props r#ref={()} value=1 r#ref={()} /> };
   |                    ^^^^^^^

error: `with` doesn't have a value. (hint: set the value to `true` or `false` for boolean attributes)
  --> tests/html_macro/component-fail.rs:73:20
   |
73 |     html! { <Child with props value=1 r#ref={()}  r#ref={()} /> };
   |                    ^^^^

error: base props expression must appear last in list of props
  --> tests/html_macro/component-fail.rs:74:20
   |
74 |     html! { <Child ..props value=1 r#ref={()}  r#ref={()} /> };
   |                    ^^^^^^^

error: `with` doesn't have a value. (hint: set the value to `true` or `false` for boolean attributes)
  --> tests/html_macro/component-fail.rs:75:28
   |
75 |     html! { <Child value=1 with props  r#ref={()}  r#ref={()} /> };
   |                            ^^^^

error: base props expression must appear last in list of props
  --> tests/html_macro/component-fail.rs:76:28
   |
76 |     html! { <Child value=1 ..props  r#ref={()}  r#ref={()} /> };
   |                            ^^^^^^^

error: `with` doesn't have a value. (hint: set the value to `true` or `false` for boolean attributes)
  --> tests/html_macro/component-fail.rs:77:39
   |
77 |     html! { <Child value=1 r#ref={()} with props r#ref={()} /> };
   |                                       ^^^^

error: base props expression must appear last in list of props
  --> tests/html_macro/component-fail.rs:78:39
   |
78 |     html! { <Child value=1 r#ref={()} ..props r#ref={()} /> };
   |                                       ^^^^^^^

error: `with` doesn't have a value. (hint: set the value to `true` or `false` for boolean attributes)
  --> tests/html_macro/component-fail.rs:79:51
   |
79 |     html! { <Child r#ref={()} r#ref={()} value=1  with props  /> };
   |                                                   ^^^^

error: `r#ref` can only be specified once but is given here again
  --> tests/html_macro/component-fail.rs:80:31
   |
80 |     html! { <Child r#ref={()} r#ref={()} value=1 ..props  /> };
   |                               ^^^^^

error: base props expression must appear last in list of props
  --> tests/html_macro/component-fail.rs:83:20
   |
83 |     html! { <Child .. props value=1 /> };
   |                    ^^^^^^^^

error: expected identifier, found keyword `type`
  --> tests/html_macro/component-fail.rs:84:20
   |
84 |     html! { <Child type=0 /> };
   |                    ^^^^ expected identifier, found keyword
   |
help: escape `type` to use it as an identifier
   |
84 |     html! { <Child r#type=0 /> };
   |                    ++

error: the property value must be either a literal or enclosed in braces. Consider adding braces around your expression.
  --> tests/html_macro/component-fail.rs:85:24
   |
85 |     html! { <Child ref=() /> };
   |                        ^^

error: expected a valid Rust identifier
  --> tests/html_macro/component-fail.rs:86:20
   |
86 |     html! { <Child invalid-prop-name=0 /> };
   |                    ^^^^^^^^^^^^^^^^^

error: expected an expression following this equals sign
  --> tests/html_macro/component-fail.rs:88:26
   |
88 |     html! { <Child string= /> };
   |                          ^

error: `int` can only be specified once but is given here again
  --> tests/html_macro/component-fail.rs:89:26
   |
89 |     html! { <Child int=1 int=2 int=3 /> };
   |                          ^^^

error: `int` can only be specified once but is given here again
  --> tests/html_macro/component-fail.rs:89:32
   |
89 |     html! { <Child int=1 int=2 int=3 /> };
   |                                ^^^

error: cannot use `ref` with components. If you want to specify a property, use `r#ref` here instead.
  --> tests/html_macro/component-fail.rs:93:26
   |
93 |     html! { <Child int=1 ref={()} /> };
   |                          ^^^

error: `ref` can only be specified once
  --> tests/html_macro/component-fail.rs:94:35
   |
94 |     html! { <Child int=1 ref={()} ref={()} /> };
   |                                   ^^^

error: `r#ref` can only be specified once but is given here again
  --> tests/html_macro/component-fail.rs:96:37
   |
96 |     html! { <Child int=1 r#ref={()} r#ref={()} /> };
   |                                     ^^^^^

error: this closing tag has no corresponding opening tag
  --> tests/html_macro/component-fail.rs:99:13
   |
99 |     html! { </Child> };
   |             ^^^^^^^^

error: this opening tag has no corresponding closing tag
   --> tests/html_macro/component-fail.rs:100:13
    |
100 |     html! { <Child><Child></Child> };
    |             ^^^^^^^

error: the property value must be either a literal or enclosed in braces. Consider adding braces around your expression.
   --> tests/html_macro/component-fail.rs:105:24
    |
105 |     html! { <Child int=num ..props /> };
    |                        ^^^

error: cannot specify the `children` prop when the component already has children
   --> tests/html_macro/component-fail.rs:123:26
    |
123 |         <ChildContainer {children}>
    |                          ^^^^^^^^

error: only simple identifiers are allowed in the shorthand property syntax
   --> tests/html_macro/component-fail.rs:133:21
    |
133 |     html! { <Child {std::f64::consts::PI} /> };
    |                     ^^^^^^^^^^^^^^^^^^^^

error: missing label for property value. If trying to use the shorthand property syntax, only identifiers may be used
   --> tests/html_macro/component-fail.rs:134:21
    |
134 |     html! { <Child {7 + 6} /> };
    |                     ^^^^^

error: missing label for property value. If trying to use the shorthand property syntax, only identifiers may be used
   --> tests/html_macro/component-fail.rs:135:21
    |
135 |     html! { <Child {children.len()} /> };
    |                     ^^^^^^^^^^^^^^

error: only an expression may be assigned as a property
   --> tests/html_macro/component-fail.rs:146:34
    |
146 |     html! { <HtmlInProps header={macro_rules! declare { }} /> };
    |                                  ^^^^^^^^^^^^^^^^^^^^^^^^

error: mismatched closing tags: expected `A`, found `B`
   --> tests/html_macro/component-fail.rs:176:22
    |
176 |     let _ = html! { <A></B> };
    |                      ^^^^^

error: expected a valid closing tag for component
       note: found opening tag `<A>`
       help: try `</A>`
   --> tests/html_macro/component-fail.rs:177:24
    |
177 |     let _ = html! { <A></> };
    |                        ^^^

error: cannot find macro `html_nested` in this scope
   --> tests/html_macro/component-fail.rs:121:47
    |
121 |     let children = ChildrenRenderer::new(vec![html_nested! { <Child int=0 /> }]);
    |                                               ^^^^^^^^^^^
    |
help: consider importing one of these macros
    |
1   + use yew::html_nested;
    |
1   + use yew_html_ext::html_nested;
    |

error: cannot find macro `html_nested` in this scope
   --> tests/html_macro/component-fail.rs:128:5
    |
128 |     html_nested! {
    |     ^^^^^^^^^^^
    |
help: consider importing one of these macros
    |
1   + use yew::html_nested;
    |
1   + use yew_html_ext::html_nested;
    |

error: cannot find attribute `function_component` in this scope
   --> tests/html_macro/component-fail.rs:142:3
    |
142 | #[function_component]
    |   ^^^^^^^^^^^^^^^^^^
    |
help: consider importing this attribute macro
    |
1   + use yew::function_component;
    |

error[E0412]: cannot find type `Context` in this scope
  --> tests/html_macro/component-fail.rs:15:22
   |
15 |     fn create(_ctx: &Context<Self>) -> Self {
   |                      ^^^^^^^ not found in this scope
   |
help: consider importing one of these structs
   |
1  + use std::task::Context;
   |
1  + use yew::Context;
   |

error[E0412]: cannot find type `Context` in this scope
  --> tests/html_macro/component-fail.rs:18:27
   |
18 |     fn view(&self, _ctx: &Context<Self>) -> Html {
   |                           ^^^^^^^ not found in this scope
   |
help: consider importing one of these structs
   |
1  + use std::task::Context;
   |
1  + use yew::Context;
   |

error[E0412]: cannot find type `Html` in this scope
  --> tests/html_macro/component-fail.rs:18:45
   |
18 |     fn view(&self, _ctx: &Context<Self>) -> Html {
   |                                             ^^^^ not found in this scope
   |
help: consider importing this type alias
   |
1  + use yew::Html;
   |

error[E0412]: cannot find type `Context` in this scope
  --> tests/html_macro/component-fail.rs:33:22
   |
33 |     fn create(_ctx: &Context<Self>) -> Self {
   |                      ^^^^^^^ not found in this scope
   |
help: consider importing one of these structs
   |
1  + use std::task::Context;
   |
1  + use yew::Context;
   |

error[E0412]: cannot find type `Context` in this scope
  --> tests/html_macro/component-fail.rs:36:27
   |
36 |     fn view(&self, _ctx: &Context<Self>) -> Html {
   |                           ^^^^^^^ not found in this scope
   |
help: consider importing one of these structs
   |
1  + use std::task::Context;
   |
1  + use yew::Context;
   |

error[E0412]: cannot find type `Html` in this scope
  --> tests/html_macro/component-fail.rs:36:45
   |
36 |     fn view(&self, _ctx: &Context<Self>) -> Html {
   |                                             ^^^^ not found in this scope
   |
help: consider importing this type alias
   |
1  + use yew::Html;
   |

error[E0425]: cannot find value `blah` in this scope
  --> tests/html_macro/component-fail.rs:81:22
   |
81 |     html! { <Child ..blah /> };
   |                      ^^^^ not found in this scope

error[E0425]: cannot find value `props` in this scope
  --> tests/html_macro/component-fail.rs:82:30
   |
82 |     html! { <Child value=1 ..props /> };
   |                              ^^^^^ not found in this scope

error[E0433]: failed to resolve: use of undeclared type `ChildrenRenderer`
   --> tests/html_macro/component-fail.rs:121:20
    |
121 |     let children = ChildrenRenderer::new(vec![html_nested! { <Child int=0 /> }]);
    |                    ^^^^^^^^^^^^^^^^ use of undeclared type `ChildrenRenderer`
    |
help: consider importing this struct
    |
1   + use yew::html::ChildrenRenderer;
    |

error[E0412]: cannot find type `Html` in this scope
   --> tests/html_macro/component-fail.rs:143:50
    |
143 | fn HtmlInProps(props: &HtmlInPropsProperties) -> Html { let _ = (); unimplemented!() }
    |                                                  ^^^^ not found in this scope
    |
help: consider importing this type alias
    |
1   + use yew::Html;
    |

error[E0573]: expected type, found function `HtmlInProps`
   --> tests/html_macro/component-fail.rs:147:14
    |
147 |     html! { <HtmlInProps header={format!("ending with semi");} /> };
    |              ^^^^^^^^^^^ not a type

error[E0412]: cannot find type `Context` in this scope
   --> tests/html_macro/component-fail.rs:156:26
    |
156 |         fn create(_ctx: &Context<Self>) -> Self {
    |                          ^^^^^^^ not found in this scope
    |
help: consider importing one of these structs
    |
1   + use std::task::Context;
    |
1   + use yew::Context;
    |

error[E0412]: cannot find type `Context` in this scope
   --> tests/html_macro/component-fail.rs:159:31
    |
159 |         fn view(&self, _ctx: &Context<Self>) -> Html {
    |                               ^^^^^^^ not found in this scope
    |
help: consider importing one of these structs
    |
1   + use std::task::Context;
    |
1   + use yew::Context;
    |

error[E0412]: cannot find type `Html` in this scope
   --> tests/html_macro/component-fail.rs:159:49
    |
159 |         fn view(&self, _ctx: &Context<Self>) -> Html {
    |                                                 ^^^^ not found in this scope
    |
help: consider importing this type alias
    |
1   + use yew::Html;
    |

error[E0412]: cannot find type `Context` in this scope
   --> tests/html_macro/component-fail.rs:169:26
    |
169 |         fn create(_ctx: &Context<Self>) -> Self {
    |                          ^^^^^^^ not found in this scope
    |
help: consider importing one of these structs
    |
1   + use std::task::Context;
    |
1   + use yew::Context;
    |

error[E0412]: cannot find type `Context` in this scope
   --> tests/html_macro/component-fail.rs:172:31
    |
172 |         fn view(&self, _ctx: &Context<Self>) -> Html {
    |                               ^^^^^^^ not found in this scope
    |
help: consider importing one of these structs
    |
1   + use std::task::Context;
    |
1   + use yew::Context;
    |

error[E0412]: cannot find type `Html` in this scope
   --> tests/html_macro/component-fail.rs:172:49
    |
172 |         fn view(&self, _ctx: &Context<Self>) -> Html {
    |                                                 ^^^^ not found in this scope
    |
help: consider importing this type alias
    |
1   + use yew::Html;
    |

error[E0308]: mismatched types
  --> tests/html_macro/component-fail.rs:52:22
   |
52 |     html! { <Child ..p1 ..p2 /> };
   |              -----   ^^^^^^^ expected `ChildProperties`, found `Range<_>`
   |              |
   |              expected due to this
   |
   = note: expected struct `ChildProperties`
              found struct `std::ops::Range<_>`

error[E0609]: no field `value` on type `ChildProperties`
  --> tests/html_macro/component-fail.rs:82:20
   |
82 |     html! { <Child value=1 ..props /> };
   |                    ^^^^^ unknown field
   |
   = note: available fields are: `string`, `int`

error[E0609]: no field `r#type` on type `ChildProperties`
  --> tests/html_macro/component-fail.rs:84:20
   |
84 |     html! { <Child type=0 /> };
   |                    ^^^^ unknown field
   |
   = note: available fields are: `string`, `int`

error[E0599]: no method named `r#type` found for struct `ChildPropertiesBuilder` in the current scope
  --> tests/html_macro/component-fail.rs:84:20
   |
3  | #[derive(Clone, ::yew::Properties, PartialEq)]
   |                 ----------------- method `r#type` not found for this struct
...
84 |     html! { <Child type=0 /> };
   |                    ^^^^
   |
help: there is a method `type_id` with a similar name, but with different arguments
  --> $RUST/core/src/any.rs
   |
   |     fn type_id(&self) -> TypeId;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0609]: no field `unknown` on type `ChildProperties`
  --> tests/html_macro/component-fail.rs:87:20
   |
87 |     html! { <Child unknown="unknown" /> };
   |                    ^^^^^^^ unknown field
   |
   = note: available fields are: `string`, `int`

error[E0599]: no method named `unknown` found for struct `ChildPropertiesBuilder` in the current scope
  --> tests/html_macro/component-fail.rs:87:20
   |
3  | #[derive(Clone, ::yew::Properties, PartialEq)]
   |                 ----------------- method `unknown` not found for this struct
...
87 |     html! { <Child unknown="unknown" /> };
   |                    ^^^^^^^ method not found in `ChildPropertiesBuilder`

error[E0277]: the trait bound `(): IntoPropValue<String>` is not satisfied
  --> tests/html_macro/component-fail.rs:90:33
   |
90 |     html! { <Child int=1 string={} /> };
   |                          ------ ^^ the trait `IntoPropValue<String>` is not implemented for `()`
   |                          |
   |                          required by a bound introduced by this call
   |
   = help: the trait `IntoPropValue<String>` is not implemented for `()`
           but trait `IntoPropValue<VNode>` is implemented for it
   = help: for that trait implementation, expected `VNode`, found `String`
note: required by a bound in `ChildPropertiesBuilder::string`
  --> tests/html_macro/component-fail.rs:3:17
   |
3  | #[derive(Clone, ::yew::Properties, PartialEq)]
   |                 ^^^^^^^^^^^^^^^^^ required by this bound in `ChildPropertiesBuilder::string`
...
6  |     pub string: String,
   |         ------ required by a bound in this associated function
   = note: this error originates in the derive macro `::yew::Properties` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: the trait bound `{integer}: IntoPropValue<String>` is not satisfied
  --> tests/html_macro/component-fail.rs:91:33
   |
91 |     html! { <Child int=1 string=3 /> };
   |                          ------ ^ the trait `IntoPropValue<String>` is not implemented for `{integer}`
   |                          |
   |                          required by a bound introduced by this call
   |
   = help: the following other types implement trait `IntoPropValue<T>`:
             f32
             f64
             i128
             i16
             i32
             i64
             i8
             isize
           and $N others
note: required by a bound in `ChildPropertiesBuilder::string`
  --> tests/html_macro/component-fail.rs:3:17
   |
3  | #[derive(Clone, ::yew::Properties, PartialEq)]
   |                 ^^^^^^^^^^^^^^^^^ required by this bound in `ChildPropertiesBuilder::string`
...
6  |     pub string: String,
   |         ------ required by a bound in this associated function
   = note: this error originates in the derive macro `::yew::Properties` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: the trait bound `{integer}: IntoPropValue<String>` is not satisfied
  --> tests/html_macro/component-fail.rs:92:34
   |
92 |     html! { <Child int=1 string={3} /> };
   |                          ------  ^ the trait `IntoPropValue<String>` is not implemented for `{integer}`
   |                          |
   |                          required by a bound introduced by this call
   |
   = help: the following other types implement trait `IntoPropValue<T>`:
             f32
             f64
             i128
             i16
             i32
             i64
             i8
             isize
           and $N others
note: required by a bound in `ChildPropertiesBuilder::string`
  --> tests/html_macro/component-fail.rs:3:17
   |
3  | #[derive(Clone, ::yew::Properties, PartialEq)]
   |                 ^^^^^^^^^^^^^^^^^ required by this bound in `ChildPropertiesBuilder::string`
...
6  |     pub string: String,
   |         ------ required by a bound in this associated function
   = note: this error originates in the derive macro `::yew::Properties` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0609]: no field `r#ref` on type `ChildProperties`
  --> tests/html_macro/component-fail.rs:95:26
   |
95 |     html! { <Child int=1 r#ref={()} /> };
   |                          ^^^^^ unknown field
   |
   = note: available fields are: `string`, `int`

error[E0599]: no method named `r#ref` found for struct `ChildPropertiesBuilder` in the current scope
  --> tests/html_macro/component-fail.rs:95:26
   |
3  | #[derive(Clone, ::yew::Properties, PartialEq)]
   |                 ----------------- method `r#ref` not found for this struct
...
95 |     html! { <Child int=1 r#ref={()} /> };
   |                          ^^^^^ method not found in `ChildPropertiesBuilder`

error[E0277]: the trait bound `u32: IntoPropValue<i32>` is not satisfied
  --> tests/html_macro/component-fail.rs:97:24
   |
97 |     html! { <Child int=0u32 /> };
   |                    --- ^^^^ the trait `IntoPropValue<i32>` is not implemented for `u32`
   |                    |
   |                    required by a bound introduced by this call
   |
   = help: the trait `IntoPropValue<i32>` is not implemented for `u32`
           but trait `IntoPropValue<VNode>` is implemented for it
   = help: for that trait implementation, expected `VNode`, found `i32`
note: required by a bound in `ChildPropertiesBuilder::int`
  --> tests/html_macro/component-fail.rs:3:17
   |
3  | #[derive(Clone, ::yew::Properties, PartialEq)]
   |                 ^^^^^^^^^^^^^^^^^ required by this bound in `ChildPropertiesBuilder::int`
...
7  |     pub int: i32,
   |         --- required by a bound in this associated function
   = note: this error originates in the derive macro `::yew::Properties` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: the trait bound `AssertAllProps: AllPropsFor<ChildPropertiesBuilder, (_,)>` is not satisfied
  --> tests/html_macro/component-fail.rs:98:14
   |
98 |     html! { <Child string="abc" /> };
   |              ^^^^^ the trait `HasProp<int, _>` is not implemented for `AssertAllProps`
   |
   = help: the following other types implement trait `HasProp<P, How>`:
             `CheckChildContainerPropertiesAll<B>` implements `HasProp<P, &dyn HasProp<P, How>>`
             `CheckChildPropertiesAll<B>` implements `HasProp<P, &dyn HasProp<P, How>>`
             `CheckChildrenPropsAll<B>` implements `HasProp<P, &dyn HasProp<P, How>>`
             `CheckContextProviderPropsAll<B>` implements `HasProp<P, &dyn HasProp<P, How>>`
             `CheckHtmlInPropsPropertiesAll<B>` implements `HasProp<P, &dyn HasProp<P, How>>`
             `HasChildContainerPropertieschildren<B>` implements `HasProp<P, &dyn HasProp<P, How>>`
             `HasChildContainerPropertieschildren<B>` implements `HasProp<_ChildContainerProperties::children, HasChildContainerPropertieschildren<B>>`
             `HasChildPropertiesint<B>` implements `HasProp<P, &dyn HasProp<P, How>>`
           and $N others
note: required for `CheckChildPropertiesAll<AssertAllProps>` to implement `HasAllProps<ChildProperties, (_,)>`
  --> tests/html_macro/component-fail.rs:3:17
   |
3  | #[derive(Clone, ::yew::Properties, PartialEq)]
   |                 ^^^^^^^^^^^^^^^^^ unsatisfied trait bound introduced in this `derive` macro
   = note: required for `AssertAllProps` to implement `AllPropsFor<ChildPropertiesBuilder, (_,)>`
note: required by a bound in `html::component::properties::__macro::PreBuild::<Token, B>::build`
  --> /home/maa/.cargo/git/checkouts/yew-07f42ef43f99cbca/69e3b5f/packages/yew/src/html/component/properties.rs:76:20
   |
74 |         pub fn build<How>(self) -> B::Output
   |                ----- required by a bound in this associated function
75 |         where
76 |             Token: AllPropsFor<B, How>,
   |                    ^^^^^^^^^^^^^^^^^^^ required by this bound in `PreBuild::<Token, B>::build`
   = note: this error originates in the macro `html` which comes from the expansion of the derive macro `::yew::Properties` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: the trait bound `AssertAllProps: AllPropsFor<ChildPropertiesBuilder, (_,)>` is not satisfied
   --> tests/html_macro/component-fail.rs:101:14
    |
101 |     html! { <Child></Child><Child></Child> };
    |              ^^^^^ the trait `HasProp<int, _>` is not implemented for `AssertAllProps`
    |
    = help: the following other types implement trait `HasProp<P, How>`:
              `CheckChildContainerPropertiesAll<B>` implements `HasProp<P, &dyn HasProp<P, How>>`
              `CheckChildPropertiesAll<B>` implements `HasProp<P, &dyn HasProp<P, How>>`
              `CheckChildrenPropsAll<B>` implements `HasProp<P, &dyn HasProp<P, How>>`
              `CheckContextProviderPropsAll<B>` implements `HasProp<P, &dyn HasProp<P, How>>`
              `CheckHtmlInPropsPropertiesAll<B>` implements `HasProp<P, &dyn HasProp<P, How>>`
              `HasChildContainerPropertieschildren<B>` implements `HasProp<P, &dyn HasProp<P, How>>`
              `HasChildContainerPropertieschildren<B>` implements `HasProp<_ChildContainerProperties::children, HasChildContainerPropertieschildren<B>>`
              `HasChildPropertiesint<B>` implements `HasProp<P, &dyn HasProp<P, How>>`
            and $N others
note: required for `CheckChildPropertiesAll<AssertAllProps>` to implement `HasAllProps<ChildProperties, (_,)>`
   --> tests/html_macro/component-fail.rs:3:17
    |
3   | #[derive(Clone, ::yew::Properties, PartialEq)]
    |                 ^^^^^^^^^^^^^^^^^ unsatisfied trait bound introduced in this `derive` macro
    = note: required for `AssertAllProps` to implement `AllPropsFor<ChildPropertiesBuilder, (_,)>`
note: required by a bound in `html::component::properties::__macro::PreBuild::<Token, B>::build`
   --> /home/maa/.cargo/git/checkouts/yew-07f42ef43f99cbca/69e3b5f/packages/yew/src/html/component/properties.rs:76:20
    |
74  |         pub fn build<How>(self) -> B::Output
    |                ----- required by a bound in this associated function
75  |         where
76  |             Token: AllPropsFor<B, How>,
    |                    ^^^^^^^^^^^^^^^^^^^ required by this bound in `PreBuild::<Token, B>::build`
    = note: this error originates in the macro `html` which comes from the expansion of the derive macro `::yew::Properties` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: the trait bound `AssertAllProps: AllPropsFor<ChildPropertiesBuilder, (_,)>` is not satisfied
   --> tests/html_macro/component-fail.rs:101:29
    |
101 |     html! { <Child></Child><Child></Child> };
    |                             ^^^^^ the trait `HasProp<int, _>` is not implemented for `AssertAllProps`
    |
    = help: the following other types implement trait `HasProp<P, How>`:
              `CheckChildContainerPropertiesAll<B>` implements `HasProp<P, &dyn HasProp<P, How>>`
              `CheckChildPropertiesAll<B>` implements `HasProp<P, &dyn HasProp<P, How>>`
              `CheckChildrenPropsAll<B>` implements `HasProp<P, &dyn HasProp<P, How>>`
              `CheckContextProviderPropsAll<B>` implements `HasProp<P, &dyn HasProp<P, How>>`
              `CheckHtmlInPropsPropertiesAll<B>` implements `HasProp<P, &dyn HasProp<P, How>>`
              `HasChildContainerPropertieschildren<B>` implements `HasProp<P, &dyn HasProp<P, How>>`
              `HasChildContainerPropertieschildren<B>` implements `HasProp<_ChildContainerProperties::children, HasChildContainerPropertieschildren<B>>`
              `HasChildPropertiesint<B>` implements `HasProp<P, &dyn HasProp<P, How>>`
            and $N others
note: required for `CheckChildPropertiesAll<AssertAllProps>` to implement `HasAllProps<ChildProperties, (_,)>`
   --> tests/html_macro/component-fail.rs:3:17
    |
3   | #[derive(Clone, ::yew::Properties, PartialEq)]
    |                 ^^^^^^^^^^^^^^^^^ unsatisfied trait bound introduced in this `derive` macro
    = note: required for `AssertAllProps` to implement `AllPropsFor<ChildPropertiesBuilder, (_,)>`
note: required by a bound in `html::component::properties::__macro::PreBuild::<Token, B>::build`
   --> /home/maa/.cargo/git/checkouts/yew-07f42ef43f99cbca/69e3b5f/packages/yew/src/html/component/properties.rs:76:20
    |
74  |         pub fn build<How>(self) -> B::Output
    |                ----- required by a bound in this associated function
75  |         where
76  |             Token: AllPropsFor<B, How>,
    |                    ^^^^^^^^^^^^^^^^^^^ required by this bound in `PreBuild::<Token, B>::build`
    = note: this error originates in the macro `html` which comes from the expansion of the derive macro `::yew::Properties` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0609]: no field `children` on type `ChildProperties`
   --> tests/html_macro/component-fail.rs:102:14
    |
102 |     html! { <Child>{ "Not allowed" }</Child> };
    |              ^^^^^ unknown field
    |
    = note: this error originates in the macro `html` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0599]: no method named `children` found for struct `ChildPropertiesBuilder` in the current scope
   --> tests/html_macro/component-fail.rs:102:14
    |
3   | #[derive(Clone, ::yew::Properties, PartialEq)]
    |                 ----------------- method `children` not found for this struct
...
102 |     html! { <Child>{ "Not allowed" }</Child> };
    |              ^^^^^ method not found in `ChildPropertiesBuilder`
    |
    = note: this error originates in the macro `html` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0609]: no field `children` on type `ChildProperties`
   --> tests/html_macro/component-fail.rs:109:10
    |
109 |         <Child ..ChildProperties { string: "hello".to_owned(), int: 5 }>
    |          ^^^^^ unknown field
    |
    = note: this error originates in the macro `html` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: the trait bound `AssertAllProps: AllPropsFor<ChildContainerPropertiesBuilder, (_,)>` is not satisfied
   --> tests/html_macro/component-fail.rs:114:14
    |
114 |     html! { <ChildContainer /> };
    |              ^^^^^^^^^^^^^^ the trait `HasProp<_ChildContainerProperties::children, _>` is not implemented for `AssertAllProps`
    |
    = help: the following other types implement trait `HasProp<P, How>`:
              `CheckChildContainerPropertiesAll<B>` implements `HasProp<P, &dyn HasProp<P, How>>`
              `CheckChildPropertiesAll<B>` implements `HasProp<P, &dyn HasProp<P, How>>`
              `CheckChildrenPropsAll<B>` implements `HasProp<P, &dyn HasProp<P, How>>`
              `CheckContextProviderPropsAll<B>` implements `HasProp<P, &dyn HasProp<P, How>>`
              `CheckHtmlInPropsPropertiesAll<B>` implements `HasProp<P, &dyn HasProp<P, How>>`
              `HasChildContainerPropertieschildren<B>` implements `HasProp<P, &dyn HasProp<P, How>>`
              `HasChildContainerPropertieschildren<B>` implements `HasProp<_ChildContainerProperties::children, HasChildContainerPropertieschildren<B>>`
              `HasChildPropertiesint<B>` implements `HasProp<P, &dyn HasProp<P, How>>`
            and $N others
note: required for `CheckChildContainerPropertiesAll<AssertAllProps>` to implement `HasAllProps<ChildContainerProperties, (_,)>`
   --> tests/html_macro/component-fail.rs:23:17
    |
23  | #[derive(Clone, ::yew::Properties, PartialEq)]
    |                 ^^^^^^^^^^^^^^^^^ unsatisfied trait bound introduced in this `derive` macro
    = note: required for `AssertAllProps` to implement `AllPropsFor<ChildContainerPropertiesBuilder, (_,)>`
note: required by a bound in `html::component::properties::__macro::PreBuild::<Token, B>::build`
   --> /home/maa/.cargo/git/checkouts/yew-07f42ef43f99cbca/69e3b5f/packages/yew/src/html/component/properties.rs:76:20
    |
74  |         pub fn build<How>(self) -> B::Output
    |                ----- required by a bound in this associated function
75  |         where
76  |             Token: AllPropsFor<B, How>,
    |                    ^^^^^^^^^^^^^^^^^^^ required by this bound in `PreBuild::<Token, B>::build`
    = note: this error originates in the macro `html` which comes from the expansion of the derive macro `::yew::Properties` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: the trait bound `AssertAllProps: AllPropsFor<ChildContainerPropertiesBuilder, (_,)>` is not satisfied
   --> tests/html_macro/component-fail.rs:115:14
    |
115 |     html! { <ChildContainer></ChildContainer> };
    |              ^^^^^^^^^^^^^^ the trait `HasProp<_ChildContainerProperties::children, _>` is not implemented for `AssertAllProps`
    |
    = help: the following other types implement trait `HasProp<P, How>`:
              `CheckChildContainerPropertiesAll<B>` implements `HasProp<P, &dyn HasProp<P, How>>`
              `CheckChildPropertiesAll<B>` implements `HasProp<P, &dyn HasProp<P, How>>`
              `CheckChildrenPropsAll<B>` implements `HasProp<P, &dyn HasProp<P, How>>`
              `CheckContextProviderPropsAll<B>` implements `HasProp<P, &dyn HasProp<P, How>>`
              `CheckHtmlInPropsPropertiesAll<B>` implements `HasProp<P, &dyn HasProp<P, How>>`
              `HasChildContainerPropertieschildren<B>` implements `HasProp<P, &dyn HasProp<P, How>>`
              `HasChildContainerPropertieschildren<B>` implements `HasProp<_ChildContainerProperties::children, HasChildContainerPropertieschildren<B>>`
              `HasChildPropertiesint<B>` implements `HasProp<P, &dyn HasProp<P, How>>`
            and $N others
note: required for `CheckChildContainerPropertiesAll<AssertAllProps>` to implement `HasAllProps<ChildContainerProperties, (_,)>`
   --> tests/html_macro/component-fail.rs:23:17
    |
23  | #[derive(Clone, ::yew::Properties, PartialEq)]
    |                 ^^^^^^^^^^^^^^^^^ unsatisfied trait bound introduced in this `derive` macro
    = note: required for `AssertAllProps` to implement `AllPropsFor<ChildContainerPropertiesBuilder, (_,)>`
note: required by a bound in `html::component::properties::__macro::PreBuild::<Token, B>::build`
   --> /home/maa/.cargo/git/checkouts/yew-07f42ef43f99cbca/69e3b5f/packages/yew/src/html/component/properties.rs:76:20
    |
74  |         pub fn build<How>(self) -> B::Output
    |                ----- required by a bound in this associated function
75  |         where
76  |             Token: AllPropsFor<B, How>,
    |                    ^^^^^^^^^^^^^^^^^^^ required by this bound in `PreBuild::<Token, B>::build`
    = note: this error originates in the macro `html` which comes from the expansion of the derive macro `::yew::Properties` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: the trait bound `yew::virtual_dom::VText: IntoPropValue<ChildrenRenderer<VChild<Child>>>` is not satisfied
   --> tests/html_macro/component-fail.rs:116:31
    |
116 |     html! { <ChildContainer>{ "Not allowed" }</ChildContainer> };
    |              --------------   ^^^^^^^^^^^^^ the trait `IntoPropValue<ChildrenRenderer<VChild<Child>>>` is not implemented for `yew::virtual_dom::VText`
    |              |
    |              required by a bound introduced by this call
    |
    = help: the following other types implement trait `IntoPropValue<T>`:
              `yew::virtual_dom::VText` implements `IntoPropValue<ChildrenRenderer<VNode>>`
              `yew::virtual_dom::VText` implements `IntoPropValue<VNode>`
note: required by a bound in `ChildContainerPropertiesBuilder::children`
   --> tests/html_macro/component-fail.rs:23:17
    |
23  | #[derive(Clone, ::yew::Properties, PartialEq)]
    |                 ^^^^^^^^^^^^^^^^^ required by this bound in `ChildContainerPropertiesBuilder::children`
24  | pub struct ChildContainerProperties {
25  |     pub children: ::yew::html::ChildrenWithProps<Child>,
    |         -------- required by a bound in this associated function
    = note: this error originates in the derive macro `::yew::Properties` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: the trait bound `VChild<Child>: From<VNode>` is not satisfied
   --> tests/html_macro/component-fail.rs:117:29
    |
117 |     html! { <ChildContainer><></></ChildContainer> };
    |                             ^^^^^ the trait `From<VNode>` is not implemented for `VChild<Child>`
    |
    = note: required for `VNode` to implement `Into<VChild<Child>>`

error[E0277]: the trait bound `VNode: IntoPropValue<ChildrenRenderer<VChild<Child>>>` is not satisfied
   --> tests/html_macro/component-fail.rs:118:30
    |
118 |     html! { <ChildContainer><other /></ChildContainer> };
    |              --------------  ^^^^^ the trait `IntoPropValue<ChildrenRenderer<VChild<Child>>>` is not implemented for `VNode`
    |              |
    |              required by a bound introduced by this call
    |
    = help: the trait `IntoPropValue<ChildrenRenderer<VChild<Child>>>` is not implemented for `VNode`
            but trait `IntoPropValue<ChildrenRenderer<VNode>>` is implemented for it
    = help: for that trait implementation, expected `VNode`, found `VChild<Child>`
note: required by a bound in `ChildContainerPropertiesBuilder::children`
   --> tests/html_macro/component-fail.rs:23:17
    |
23  | #[derive(Clone, ::yew::Properties, PartialEq)]
    |                 ^^^^^^^^^^^^^^^^^ required by this bound in `ChildContainerPropertiesBuilder::children`
24  | pub struct ChildContainerProperties {
25  |     pub children: ::yew::html::ChildrenWithProps<Child>,
    |         -------- required by a bound in this associated function
    = note: this error originates in the derive macro `::yew::Properties` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0747]: constant provided when a type was expected
   --> tests/html_macro/component-fail.rs:147:14
    |
147 |     html! { <HtmlInProps header={format!("ending with semi");} /> };
    |              ^^^^^^^^^^^
    |
    = help: `HtmlInProps` is a function item, not a type
    = help: function item types cannot be named directly
